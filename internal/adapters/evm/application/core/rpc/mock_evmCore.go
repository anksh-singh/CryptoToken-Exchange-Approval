// Code generated by MockGen. DO NOT EDIT.
// Source: evmCore.go

// Package rpc is a generated GoMock package.
package rpc

import (
	reflect "reflect"
	pb "bridge-allowance/pkg/grpc/proto/pb"

	gomock "github.com/golang/mock/gomock"
)

// MockEvmCore is a mock of EvmCore interface.
type MockEvmCore struct {
	ctrl     *gomock.Controller
	recorder *MockEvmCoreMockRecorder
}

// MockEvmCoreMockRecorder is the mock recorder for MockEvmCore.
type MockEvmCoreMockRecorder struct {
	mock *MockEvmCore
}

// NewMockEvmCore creates a new mock instance.
func NewMockEvmCore(ctrl *gomock.Controller) *MockEvmCore {
	mock := &MockEvmCore{ctrl: ctrl}
	mock.recorder = &MockEvmCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvmCore) EXPECT() *MockEvmCoreMockRecorder {
	return m.recorder
}

// GasLimit mocks base method.
func (m *MockEvmCore) GasLimit(request *pb.GasLimitRequest) (*pb.GasLimitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasLimit", request)
	ret0, _ := ret[0].(*pb.GasLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GasLimit indicates an expected call of GasLimit.
func (mr *MockEvmCoreMockRecorder) GasLimit(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasLimit", reflect.TypeOf((*MockEvmCore)(nil).GasLimit), request)
}

// GetAssets mocks base method.
func (m *MockEvmCore) GetAssets(request *pb.BalanceRequest) (*pb.BalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssets", request)
	ret0, _ := ret[0].(*pb.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssets indicates an expected call of GetAssets.
func (mr *MockEvmCoreMockRecorder) GetAssets(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockEvmCore)(nil).GetAssets), request)
}

// GetNftCollections mocks base method.
func (m *MockEvmCore) GetNftCollections(request *pb.NftCollectionRequest) (*pb.ListNftCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftCollections", request)
	ret0, _ := ret[0].(*pb.ListNftCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftCollections indicates an expected call of GetNftCollections.
func (mr *MockEvmCoreMockRecorder) GetNftCollections(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftCollections", reflect.TypeOf((*MockEvmCore)(nil).GetNftCollections), request)
}

// GetNonce mocks base method.
func (m *MockEvmCore) GetNonce(request *pb.NonceRequest) (*pb.NonceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", request)
	ret0, _ := ret[0].(*pb.NonceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockEvmCoreMockRecorder) GetNonce(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockEvmCore)(nil).GetNonce), request)
}

// GetProcessingFee mocks base method.
func (m *MockEvmCore) GetProcessingFee(request *pb.ProcessingFeeRequest) (*pb.ProcessingFeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessingFee", request)
	ret0, _ := ret[0].(*pb.ProcessingFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessingFee indicates an expected call of GetProcessingFee.
func (mr *MockEvmCoreMockRecorder) GetProcessingFee(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessingFee", reflect.TypeOf((*MockEvmCore)(nil).GetProcessingFee), request)
}


// GetTokenAllowance mocks base method.
func (m *MockEvmCore) GetTokenAllowance(request *pb.AllowanceRequest) (*pb.AllowanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenAllowance", request)
	ret0, _ := ret[0].(*pb.AllowanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenAllowance indicates an expected call of GetTokenAllowance.
func (mr *MockEvmCoreMockRecorder) GetTokenAllowance(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenAllowance", reflect.TypeOf((*MockEvmCore)(nil).GetTokenAllowance), request)
}

// GetTokenPrice mocks base method.
func (m *MockEvmCore) GetTokenPrice(request *pb.TokenPriceRequest) (*pb.TokenPriceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenPrice", request)
	ret0, _ := ret[0].(*pb.TokenPriceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenPrice indicates an expected call of GetTokenPrice.
func (mr *MockEvmCoreMockRecorder) GetTokenPrice(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenPrice", reflect.TypeOf((*MockEvmCore)(nil).GetTokenPrice), request)
}

// GetTokenPriceV2 mocks base method.
func (m *MockEvmCore) GetTokenPriceV2(request *pb.TokenPriceRequest) (*pb.TokenPriceResponseV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenPriceV2", request)
	ret0, _ := ret[0].(*pb.TokenPriceResponseV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenPriceV2 indicates an expected call of GetTokenPriceV2.
func (mr *MockEvmCoreMockRecorder) GetTokenPriceV2(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenPriceV2", reflect.TypeOf((*MockEvmCore)(nil).GetTokenPriceV2), request)
}

// GetTxStatus mocks base method.
func (m *MockEvmCore) GetTxStatus(request *pb.TxStatusRequest) (*pb.TxStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxStatus", request)
	ret0, _ := ret[0].(*pb.TxStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxStatus indicates an expected call of GetTxStatus.
func (mr *MockEvmCoreMockRecorder) GetTxStatus(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxStatus", reflect.TypeOf((*MockEvmCore)(nil).GetTxStatus), request)
}

// GetUserData mocks base method.
func (m *MockEvmCore) GetUserData(request *pb.UserDataRequest) (*pb.UserDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", request)
	ret0, _ := ret[0].(*pb.UserDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockEvmCoreMockRecorder) GetUserData(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockEvmCore)(nil).GetUserData), request)
}

// ListTransaction mocks base method.
func (m *MockEvmCore) ListTransaction(request *pb.ListTransactionRequest) (*pb.ListTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransaction", request)
	ret0, _ := ret[0].(*pb.ListTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransaction indicates an expected call of ListTransaction.
func (mr *MockEvmCoreMockRecorder) ListTransaction(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransaction", reflect.TypeOf((*MockEvmCore)(nil).ListTransaction), request)
}

// SendTransaction mocks base method.
func (m *MockEvmCore) SendTransaction(request *pb.SendTransactionRequest) (*pb.SendTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", request)
	ret0, _ := ret[0].(*pb.SendTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockEvmCoreMockRecorder) SendTransaction(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockEvmCore)(nil).SendTransaction), request)
}

// TokenApprove mocks base method.
func (m *MockEvmCore) TokenApprove(request *pb.ApprovalRequest) (*pb.ApprovalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenApprove", request)
	ret0, _ := ret[0].(*pb.ApprovalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenApprove indicates an expected call of TokenApprove.
func (mr *MockEvmCoreMockRecorder) TokenApprove(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenApprove", reflect.TypeOf((*MockEvmCore)(nil).TokenApprove), request)
}
