// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: swap.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExchangeTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain        string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	ExchangeType string `protobuf:"bytes,2,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type"`
}

func (x *ExchangeTokenRequest) Reset() {
	*x = ExchangeTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeTokenRequest) ProtoMessage() {}

func (x *ExchangeTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeTokenRequest.ProtoReflect.Descriptor instead.
func (*ExchangeTokenRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{0}
}

func (x *ExchangeTokenRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *ExchangeTokenRequest) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

type ExchangeTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeTokens []*ExchangeTokenInfo `protobuf:"bytes,1,rep,name=exchangeTokens,proto3" json:"exchangeTokens"`
}

func (x *ExchangeTokenResponse) Reset() {
	*x = ExchangeTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeTokenResponse) ProtoMessage() {}

func (x *ExchangeTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeTokenResponse.ProtoReflect.Descriptor instead.
func (*ExchangeTokenResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{1}
}

func (x *ExchangeTokenResponse) GetExchangeTokens() []*ExchangeTokenInfo {
	if x != nil {
		return x.ExchangeTokens
	}
	return nil
}

type ExchangeTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenAddress  string `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address"`
	TokenDecimals string `protobuf:"bytes,2,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals"`
	TokenSymbol   string `protobuf:"bytes,3,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol"`
	TokenName     string `protobuf:"bytes,4,opt,name=token_name,json=tokenName,proto3" json:"token_name"`
	TokenLogoUrl  string `protobuf:"bytes,5,opt,name=token_logo_url,json=tokenLogoUrl,proto3" json:"token_logo_url"`
	LogoUrl       string `protobuf:"bytes,6,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url"`
}

func (x *ExchangeTokenInfo) Reset() {
	*x = ExchangeTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeTokenInfo) ProtoMessage() {}

func (x *ExchangeTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeTokenInfo.ProtoReflect.Descriptor instead.
func (*ExchangeTokenInfo) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{2}
}

func (x *ExchangeTokenInfo) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *ExchangeTokenInfo) GetTokenDecimals() string {
	if x != nil {
		return x.TokenDecimals
	}
	return ""
}

func (x *ExchangeTokenInfo) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *ExchangeTokenInfo) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *ExchangeTokenInfo) GetTokenLogoUrl() string {
	if x != nil {
		return x.TokenLogoUrl
	}
	return ""
}

func (x *ExchangeTokenInfo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

type ExchangeMultiQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain              string                `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	MultiChainRequests []*MultiChainRequests `protobuf:"bytes,2,rep,name=multi_chain_requests,json=multiChainRequests,proto3" json:"multi_chain_requests"`
	TakerAddress       string                `protobuf:"bytes,3,opt,name=taker_address,json=takerAddress,proto3" json:"taker_address"`
	ExchangeType       string                `protobuf:"bytes,4,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type"`
}

func (x *ExchangeMultiQuoteRequest) Reset() {
	*x = ExchangeMultiQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMultiQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMultiQuoteRequest) ProtoMessage() {}

func (x *ExchangeMultiQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMultiQuoteRequest.ProtoReflect.Descriptor instead.
func (*ExchangeMultiQuoteRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{3}
}

func (x *ExchangeMultiQuoteRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *ExchangeMultiQuoteRequest) GetMultiChainRequests() []*MultiChainRequests {
	if x != nil {
		return x.MultiChainRequests
	}
	return nil
}

func (x *ExchangeMultiQuoteRequest) GetTakerAddress() string {
	if x != nil {
		return x.TakerAddress
	}
	return ""
}

func (x *ExchangeMultiQuoteRequest) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

type MultiChainRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SellAmount string `protobuf:"bytes,1,opt,name=sell_amount,json=sellAmount,proto3" json:"sell_amount"`
	SellToken  string `protobuf:"bytes,2,opt,name=sell_token,json=sellToken,proto3" json:"sell_token"`
	BuyToken   string `protobuf:"bytes,3,opt,name=buy_token,json=buyToken,proto3" json:"buy_token"`
	Slippage   string `protobuf:"bytes,4,opt,name=slippage,proto3" json:"slippage"`
}

func (x *MultiChainRequests) Reset() {
	*x = MultiChainRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiChainRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiChainRequests) ProtoMessage() {}

func (x *MultiChainRequests) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiChainRequests.ProtoReflect.Descriptor instead.
func (*MultiChainRequests) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{4}
}

func (x *MultiChainRequests) GetSellAmount() string {
	if x != nil {
		return x.SellAmount
	}
	return ""
}

func (x *MultiChainRequests) GetSellToken() string {
	if x != nil {
		return x.SellToken
	}
	return ""
}

func (x *MultiChainRequests) GetBuyToken() string {
	if x != nil {
		return x.BuyToken
	}
	return ""
}

func (x *MultiChainRequests) GetSlippage() string {
	if x != nil {
		return x.Slippage
	}
	return ""
}

type ExchangeMultiQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain              string                `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	MultiChainResponse []*MultiChainResponse `protobuf:"bytes,2,rep,name=multi_chain_response,json=multiChainResponse,proto3" json:"multi_chain_response"`
}

func (x *ExchangeMultiQuoteResponse) Reset() {
	*x = ExchangeMultiQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMultiQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMultiQuoteResponse) ProtoMessage() {}

func (x *ExchangeMultiQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMultiQuoteResponse.ProtoReflect.Descriptor instead.
func (*ExchangeMultiQuoteResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{5}
}

func (x *ExchangeMultiQuoteResponse) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *ExchangeMultiQuoteResponse) GetMultiChainResponse() []*MultiChainResponse {
	if x != nil {
		return x.MultiChainResponse
	}
	return nil
}

type MultiChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResAmount            string `protobuf:"bytes,1,opt,name=res_amount,json=resAmount,proto3" json:"res_amount"`
	PriceImpact          string `protobuf:"bytes,2,opt,name=price_impact,json=priceImpact,proto3" json:"price_impact"`
	ResPricePerFromToken string `protobuf:"bytes,3,opt,name=res_price_per_from_token,json=resPricePerFromToken,proto3" json:"res_price_per_from_token"`
	ResPricePerToToken   string `protobuf:"bytes,4,opt,name=res_price_per_to_token,json=resPricePerToToken,proto3" json:"res_price_per_to_token"`
	FromTokenPrice       string `protobuf:"bytes,5,opt,name=from_token_price,json=fromTokenPrice,proto3" json:"from_token_price"`
	ToTokenPrice         string `protobuf:"bytes,6,opt,name=to_token_price,json=toTokenPrice,proto3" json:"to_token_price"`
	MinimumReceived      string `protobuf:"bytes,7,opt,name=minimum_received,json=minimumReceived,proto3" json:"minimum_received"`
	ApproveAddress       string `protobuf:"bytes,8,opt,name=approve_address,json=approveAddress,proto3" json:"approve_address"`
	SellToken            string `protobuf:"bytes,9,opt,name=sell_token,json=sellToken,proto3" json:"sell_token"`
	BuyToken             string `protobuf:"bytes,10,opt,name=buy_token,json=buyToken,proto3" json:"buy_token"`
}

func (x *MultiChainResponse) Reset() {
	*x = MultiChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiChainResponse) ProtoMessage() {}

func (x *MultiChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiChainResponse.ProtoReflect.Descriptor instead.
func (*MultiChainResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{6}
}

func (x *MultiChainResponse) GetResAmount() string {
	if x != nil {
		return x.ResAmount
	}
	return ""
}

func (x *MultiChainResponse) GetPriceImpact() string {
	if x != nil {
		return x.PriceImpact
	}
	return ""
}

func (x *MultiChainResponse) GetResPricePerFromToken() string {
	if x != nil {
		return x.ResPricePerFromToken
	}
	return ""
}

func (x *MultiChainResponse) GetResPricePerToToken() string {
	if x != nil {
		return x.ResPricePerToToken
	}
	return ""
}

func (x *MultiChainResponse) GetFromTokenPrice() string {
	if x != nil {
		return x.FromTokenPrice
	}
	return ""
}

func (x *MultiChainResponse) GetToTokenPrice() string {
	if x != nil {
		return x.ToTokenPrice
	}
	return ""
}

func (x *MultiChainResponse) GetMinimumReceived() string {
	if x != nil {
		return x.MinimumReceived
	}
	return ""
}

func (x *MultiChainResponse) GetApproveAddress() string {
	if x != nil {
		return x.ApproveAddress
	}
	return ""
}

func (x *MultiChainResponse) GetSellToken() string {
	if x != nil {
		return x.SellToken
	}
	return ""
}

func (x *MultiChainResponse) GetBuyToken() string {
	if x != nil {
		return x.BuyToken
	}
	return ""
}

type ExchangeMultiSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain              string                `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	MultiChainRequests []*MultiChainRequests `protobuf:"bytes,2,rep,name=multi_chain_requests,json=multiChainRequests,proto3" json:"multi_chain_requests"`
	TakerAddress       string                `protobuf:"bytes,3,opt,name=taker_address,json=takerAddress,proto3" json:"taker_address"`
	ExchangeType       string                `protobuf:"bytes,4,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type"`
}

func (x *ExchangeMultiSwapRequest) Reset() {
	*x = ExchangeMultiSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMultiSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMultiSwapRequest) ProtoMessage() {}

func (x *ExchangeMultiSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMultiSwapRequest.ProtoReflect.Descriptor instead.
func (*ExchangeMultiSwapRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{7}
}

func (x *ExchangeMultiSwapRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *ExchangeMultiSwapRequest) GetMultiChainRequests() []*MultiChainRequests {
	if x != nil {
		return x.MultiChainRequests
	}
	return nil
}

func (x *ExchangeMultiSwapRequest) GetTakerAddress() string {
	if x != nil {
		return x.TakerAddress
	}
	return ""
}

func (x *ExchangeMultiSwapRequest) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

type ExchangeMultiSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To             string        `protobuf:"bytes,1,opt,name=to,proto3" json:"to"`
	Data           string        `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
	Value          string        `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
	GasLimit       string        `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit"`
	Gas            string        `protobuf:"bytes,5,opt,name=gas,proto3" json:"gas"`
	TxLink         string        `protobuf:"bytes,6,opt,name=tx_link,json=txLink,proto3" json:"tx_link"`
	MultiRouteData *MultiSwapTxs `protobuf:"bytes,7,opt,name=multi_route_data,json=multiRouteData,proto3" json:"multi_route_data"`
}

func (x *ExchangeMultiSwapResponse) Reset() {
	*x = ExchangeMultiSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMultiSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMultiSwapResponse) ProtoMessage() {}

func (x *ExchangeMultiSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMultiSwapResponse.ProtoReflect.Descriptor instead.
func (*ExchangeMultiSwapResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{8}
}

func (x *ExchangeMultiSwapResponse) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ExchangeMultiSwapResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ExchangeMultiSwapResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ExchangeMultiSwapResponse) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

func (x *ExchangeMultiSwapResponse) GetGas() string {
	if x != nil {
		return x.Gas
	}
	return ""
}

func (x *ExchangeMultiSwapResponse) GetTxLink() string {
	if x != nil {
		return x.TxLink
	}
	return ""
}

func (x *ExchangeMultiSwapResponse) GetMultiRouteData() *MultiSwapTxs {
	if x != nil {
		return x.MultiRouteData
	}
	return nil
}

type ExchangeMultipleSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuoteValue  float64               `protobuf:"fixed64,1,opt,name=quote_value,json=quoteValue,proto3" json:"quote_value"`
	OpL1Fee     float64               `protobuf:"fixed64,2,opt,name=op_l1_fee,json=opL1Fee,proto3" json:"op_l1_fee"`
	GasPrice    *GasPriceInfo         `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price"`
	Approval    []*ApprovalResponse   `protobuf:"bytes,4,rep,name=approval,proto3" json:"approval"`
	Transaction *ExchangeSwapResponse `protobuf:"bytes,5,opt,name=transaction,proto3" json:"transaction"`
}

func (x *ExchangeMultipleSwapResponse) Reset() {
	*x = ExchangeMultipleSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMultipleSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMultipleSwapResponse) ProtoMessage() {}

func (x *ExchangeMultipleSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMultipleSwapResponse.ProtoReflect.Descriptor instead.
func (*ExchangeMultipleSwapResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{9}
}

func (x *ExchangeMultipleSwapResponse) GetQuoteValue() float64 {
	if x != nil {
		return x.QuoteValue
	}
	return 0
}

func (x *ExchangeMultipleSwapResponse) GetOpL1Fee() float64 {
	if x != nil {
		return x.OpL1Fee
	}
	return 0
}

func (x *ExchangeMultipleSwapResponse) GetGasPrice() *GasPriceInfo {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *ExchangeMultipleSwapResponse) GetApproval() []*ApprovalResponse {
	if x != nil {
		return x.Approval
	}
	return nil
}

func (x *ExchangeMultipleSwapResponse) GetTransaction() *ExchangeSwapResponse {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type ExchangeQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain        string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	TakerAddress string `protobuf:"bytes,2,opt,name=taker_address,json=takerAddress,proto3" json:"taker_address"`
	SellToken    string `protobuf:"bytes,3,opt,name=sell_token,json=sellToken,proto3" json:"sell_token"`
	BuyToken     string `protobuf:"bytes,4,opt,name=buy_token,json=buyToken,proto3" json:"buy_token"`
	SellAmount   string `protobuf:"bytes,5,opt,name=sell_amount,json=sellAmount,proto3" json:"sell_amount"`
	Slippage     string `protobuf:"bytes,6,opt,name=slippage,proto3" json:"slippage"`
	ExchangeType string `protobuf:"bytes,7,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type"`
}

func (x *ExchangeQuoteRequest) Reset() {
	*x = ExchangeQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeQuoteRequest) ProtoMessage() {}

func (x *ExchangeQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeQuoteRequest.ProtoReflect.Descriptor instead.
func (*ExchangeQuoteRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{10}
}

func (x *ExchangeQuoteRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *ExchangeQuoteRequest) GetTakerAddress() string {
	if x != nil {
		return x.TakerAddress
	}
	return ""
}

func (x *ExchangeQuoteRequest) GetSellToken() string {
	if x != nil {
		return x.SellToken
	}
	return ""
}

func (x *ExchangeQuoteRequest) GetBuyToken() string {
	if x != nil {
		return x.BuyToken
	}
	return ""
}

func (x *ExchangeQuoteRequest) GetSellAmount() string {
	if x != nil {
		return x.SellAmount
	}
	return ""
}

func (x *ExchangeQuoteRequest) GetSlippage() string {
	if x != nil {
		return x.Slippage
	}
	return ""
}

func (x *ExchangeQuoteRequest) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

type ExchangeQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResAmount            string `protobuf:"bytes,1,opt,name=res_amount,json=resAmount,proto3" json:"res_amount"`
	PriceImpact          string `protobuf:"bytes,2,opt,name=price_impact,json=priceImpact,proto3" json:"price_impact"`
	ResPricePerFromToken string `protobuf:"bytes,3,opt,name=res_price_per_from_token,json=resPricePerFromToken,proto3" json:"res_price_per_from_token"`
	ResPricePerToToken   string `protobuf:"bytes,4,opt,name=res_price_per_to_token,json=resPricePerToToken,proto3" json:"res_price_per_to_token"`
	FromTokenPrice       string `protobuf:"bytes,5,opt,name=from_token_price,json=fromTokenPrice,proto3" json:"from_token_price"`
	ToTokenPrice         string `protobuf:"bytes,6,opt,name=to_token_price,json=toTokenPrice,proto3" json:"to_token_price"`
	MinimumReceived      string `protobuf:"bytes,7,opt,name=minimum_received,json=minimumReceived,proto3" json:"minimum_received"`
	ApproveAddress       string `protobuf:"bytes,8,opt,name=approve_address,json=approveAddress,proto3" json:"approve_address"`
	SellToken            string `protobuf:"bytes,9,opt,name=sell_token,json=sellToken,proto3" json:"sell_token"`
	BuyToken             string `protobuf:"bytes,10,opt,name=buy_token,json=buyToken,proto3" json:"buy_token"`
}

func (x *ExchangeQuoteResponse) Reset() {
	*x = ExchangeQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeQuoteResponse) ProtoMessage() {}

func (x *ExchangeQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeQuoteResponse.ProtoReflect.Descriptor instead.
func (*ExchangeQuoteResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{11}
}

func (x *ExchangeQuoteResponse) GetResAmount() string {
	if x != nil {
		return x.ResAmount
	}
	return ""
}

func (x *ExchangeQuoteResponse) GetPriceImpact() string {
	if x != nil {
		return x.PriceImpact
	}
	return ""
}

func (x *ExchangeQuoteResponse) GetResPricePerFromToken() string {
	if x != nil {
		return x.ResPricePerFromToken
	}
	return ""
}

func (x *ExchangeQuoteResponse) GetResPricePerToToken() string {
	if x != nil {
		return x.ResPricePerToToken
	}
	return ""
}

func (x *ExchangeQuoteResponse) GetFromTokenPrice() string {
	if x != nil {
		return x.FromTokenPrice
	}
	return ""
}

func (x *ExchangeQuoteResponse) GetToTokenPrice() string {
	if x != nil {
		return x.ToTokenPrice
	}
	return ""
}

func (x *ExchangeQuoteResponse) GetMinimumReceived() string {
	if x != nil {
		return x.MinimumReceived
	}
	return ""
}

func (x *ExchangeQuoteResponse) GetApproveAddress() string {
	if x != nil {
		return x.ApproveAddress
	}
	return ""
}

func (x *ExchangeQuoteResponse) GetSellToken() string {
	if x != nil {
		return x.SellToken
	}
	return ""
}

func (x *ExchangeQuoteResponse) GetBuyToken() string {
	if x != nil {
		return x.BuyToken
	}
	return ""
}

type ExchangeSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain        string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	TakerAddress string `protobuf:"bytes,2,opt,name=taker_address,json=takerAddress,proto3" json:"taker_address"`
	SellToken    string `protobuf:"bytes,3,opt,name=sell_token,json=sellToken,proto3" json:"sell_token"`
	BuyToken     string `protobuf:"bytes,4,opt,name=buy_token,json=buyToken,proto3" json:"buy_token"`
	SellAmount   string `protobuf:"bytes,5,opt,name=sell_amount,json=sellAmount,proto3" json:"sell_amount"`
	Slippage     string `protobuf:"bytes,6,opt,name=slippage,proto3" json:"slippage"`
	ExchangeType string `protobuf:"bytes,7,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type"`
}

func (x *ExchangeSwapRequest) Reset() {
	*x = ExchangeSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSwapRequest) ProtoMessage() {}

func (x *ExchangeSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSwapRequest.ProtoReflect.Descriptor instead.
func (*ExchangeSwapRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{12}
}

func (x *ExchangeSwapRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *ExchangeSwapRequest) GetTakerAddress() string {
	if x != nil {
		return x.TakerAddress
	}
	return ""
}

func (x *ExchangeSwapRequest) GetSellToken() string {
	if x != nil {
		return x.SellToken
	}
	return ""
}

func (x *ExchangeSwapRequest) GetBuyToken() string {
	if x != nil {
		return x.BuyToken
	}
	return ""
}

func (x *ExchangeSwapRequest) GetSellAmount() string {
	if x != nil {
		return x.SellAmount
	}
	return ""
}

func (x *ExchangeSwapRequest) GetSlippage() string {
	if x != nil {
		return x.Slippage
	}
	return ""
}

func (x *ExchangeSwapRequest) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

type MultiSwapTxs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data"`
}

func (x *MultiSwapTxs) Reset() {
	*x = MultiSwapTxs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSwapTxs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSwapTxs) ProtoMessage() {}

func (x *MultiSwapTxs) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSwapTxs.ProtoReflect.Descriptor instead.
func (*MultiSwapTxs) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{13}
}

func (x *MultiSwapTxs) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExchangeSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To             string        `protobuf:"bytes,1,opt,name=to,proto3" json:"to"`
	Data           string        `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
	Value          string        `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
	GasLimit       string        `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit"`
	Gas            string        `protobuf:"bytes,5,opt,name=gas,proto3" json:"gas"`
	TxLink         string        `protobuf:"bytes,6,opt,name=tx_link,json=txLink,proto3" json:"tx_link"`
	MultiRouteData *MultiSwapTxs `protobuf:"bytes,7,opt,name=multi_route_data,json=multiRouteData,proto3" json:"multi_route_data"`
}

func (x *ExchangeSwapResponse) Reset() {
	*x = ExchangeSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSwapResponse) ProtoMessage() {}

func (x *ExchangeSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSwapResponse.ProtoReflect.Descriptor instead.
func (*ExchangeSwapResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{14}
}

func (x *ExchangeSwapResponse) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ExchangeSwapResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ExchangeSwapResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ExchangeSwapResponse) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

func (x *ExchangeSwapResponse) GetGas() string {
	if x != nil {
		return x.Gas
	}
	return ""
}

func (x *ExchangeSwapResponse) GetTxLink() string {
	if x != nil {
		return x.TxLink
	}
	return ""
}

func (x *ExchangeSwapResponse) GetMultiRouteData() *MultiSwapTxs {
	if x != nil {
		return x.MultiRouteData
	}
	return nil
}

type ExchangeSwapExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain           string                  `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	ExchangeType    string                  `protobuf:"bytes,2,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type"`
	ZeroSwapPayload *ZeroSwapExecuteRequest `protobuf:"bytes,3,opt,name=zero_swap_payload,json=zeroSwapPayload,proto3" json:"zero_swap_payload"`
	CowSwapPayload  *CowSwapExecuteRequest  `protobuf:"bytes,4,opt,name=cow_swap_payload,json=cowSwapPayload,proto3" json:"cow_swap_payload"`
}

func (x *ExchangeSwapExecuteRequest) Reset() {
	*x = ExchangeSwapExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSwapExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSwapExecuteRequest) ProtoMessage() {}

func (x *ExchangeSwapExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSwapExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExchangeSwapExecuteRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{15}
}

func (x *ExchangeSwapExecuteRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *ExchangeSwapExecuteRequest) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

func (x *ExchangeSwapExecuteRequest) GetZeroSwapPayload() *ZeroSwapExecuteRequest {
	if x != nil {
		return x.ZeroSwapPayload
	}
	return nil
}

func (x *ExchangeSwapExecuteRequest) GetCowSwapPayload() *CowSwapExecuteRequest {
	if x != nil {
		return x.CowSwapPayload
	}
	return nil
}

type ZeroSwapExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakerAddress          string `protobuf:"bytes,1,opt,name=taker_address,json=takerAddress,proto3" json:"taker_address"`
	SellToken             string `protobuf:"bytes,2,opt,name=sell_token,json=sellToken,proto3" json:"sell_token"`
	BuyToken              string `protobuf:"bytes,3,opt,name=buy_token,json=buyToken,proto3" json:"buy_token"`
	SellAmount            string `protobuf:"bytes,4,opt,name=sell_amount,json=sellAmount,proto3" json:"sell_amount"`
	Signature             string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature"`
	TransactionalDeadline string `protobuf:"bytes,6,opt,name=transactional_deadline,json=transactionalDeadline,proto3" json:"transactional_deadline"`
	Slippage              string `protobuf:"bytes,7,opt,name=slippage,proto3" json:"slippage"`
}

func (x *ZeroSwapExecuteRequest) Reset() {
	*x = ZeroSwapExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZeroSwapExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZeroSwapExecuteRequest) ProtoMessage() {}

func (x *ZeroSwapExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZeroSwapExecuteRequest.ProtoReflect.Descriptor instead.
func (*ZeroSwapExecuteRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{16}
}

func (x *ZeroSwapExecuteRequest) GetTakerAddress() string {
	if x != nil {
		return x.TakerAddress
	}
	return ""
}

func (x *ZeroSwapExecuteRequest) GetSellToken() string {
	if x != nil {
		return x.SellToken
	}
	return ""
}

func (x *ZeroSwapExecuteRequest) GetBuyToken() string {
	if x != nil {
		return x.BuyToken
	}
	return ""
}

func (x *ZeroSwapExecuteRequest) GetSellAmount() string {
	if x != nil {
		return x.SellAmount
	}
	return ""
}

func (x *ZeroSwapExecuteRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *ZeroSwapExecuteRequest) GetTransactionalDeadline() string {
	if x != nil {
		return x.TransactionalDeadline
	}
	return ""
}

func (x *ZeroSwapExecuteRequest) GetSlippage() string {
	if x != nil {
		return x.Slippage
	}
	return ""
}

type CowSwapExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SellToken         string `protobuf:"bytes,1,opt,name=sellToken,proto3" json:"sellToken"`
	BuyToken          string `protobuf:"bytes,2,opt,name=buyToken,proto3" json:"buyToken"`
	Receiver          string `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver"`
	SellAmount        string `protobuf:"bytes,4,opt,name=sellAmount,proto3" json:"sellAmount"`
	BuyAmount         string `protobuf:"bytes,5,opt,name=buyAmount,proto3" json:"buyAmount"`
	ValidTo           int32  `protobuf:"varint,6,opt,name=validTo,proto3" json:"validTo"`
	AppData           string `protobuf:"bytes,7,opt,name=appData,proto3" json:"appData"`
	FeeAmount         string `protobuf:"bytes,8,opt,name=feeAmount,proto3" json:"feeAmount"`
	Kind              string `protobuf:"bytes,9,opt,name=kind,proto3" json:"kind"`
	PartiallyFillable bool   `protobuf:"varint,10,opt,name=partiallyFillable,proto3" json:"partiallyFillable"`
	SellTokenBalance  string `protobuf:"bytes,11,opt,name=sellTokenBalance,proto3" json:"sellTokenBalance"`
	BuyTokenBalance   string `protobuf:"bytes,12,opt,name=buyTokenBalance,proto3" json:"buyTokenBalance"`
	SigningScheme     string `protobuf:"bytes,13,opt,name=signingScheme,proto3" json:"signingScheme"`
	Signature         string `protobuf:"bytes,14,opt,name=signature,proto3" json:"signature"`
	From              string `protobuf:"bytes,15,opt,name=from,proto3" json:"from"`
	QuoteId           int32  `protobuf:"varint,16,opt,name=quoteId,proto3" json:"quoteId"`
	Slippage          string `protobuf:"bytes,17,opt,name=slippage,proto3" json:"slippage"`
}

func (x *CowSwapExecuteRequest) Reset() {
	*x = CowSwapExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CowSwapExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CowSwapExecuteRequest) ProtoMessage() {}

func (x *CowSwapExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CowSwapExecuteRequest.ProtoReflect.Descriptor instead.
func (*CowSwapExecuteRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{17}
}

func (x *CowSwapExecuteRequest) GetSellToken() string {
	if x != nil {
		return x.SellToken
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetBuyToken() string {
	if x != nil {
		return x.BuyToken
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetSellAmount() string {
	if x != nil {
		return x.SellAmount
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetBuyAmount() string {
	if x != nil {
		return x.BuyAmount
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetValidTo() int32 {
	if x != nil {
		return x.ValidTo
	}
	return 0
}

func (x *CowSwapExecuteRequest) GetAppData() string {
	if x != nil {
		return x.AppData
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetPartiallyFillable() bool {
	if x != nil {
		return x.PartiallyFillable
	}
	return false
}

func (x *CowSwapExecuteRequest) GetSellTokenBalance() string {
	if x != nil {
		return x.SellTokenBalance
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetBuyTokenBalance() string {
	if x != nil {
		return x.BuyTokenBalance
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetSigningScheme() string {
	if x != nil {
		return x.SigningScheme
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CowSwapExecuteRequest) GetQuoteId() int32 {
	if x != nil {
		return x.QuoteId
	}
	return 0
}

func (x *CowSwapExecuteRequest) GetSlippage() string {
	if x != nil {
		return x.Slippage
	}
	return ""
}

type ExchangeSwapExecuteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecuteResponse      *ExecuteResponse      `protobuf:"bytes,1,opt,name=execute_response,json=executeResponse,proto3" json:"execute_response"`
	ExchangeSwapResponse *ExchangeSwapResponse `protobuf:"bytes,2,opt,name=exchange_swap_response,json=exchangeSwapResponse,proto3" json:"exchange_swap_response"`
}

func (x *ExchangeSwapExecuteResponse) Reset() {
	*x = ExchangeSwapExecuteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSwapExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSwapExecuteResponse) ProtoMessage() {}

func (x *ExchangeSwapExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSwapExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExchangeSwapExecuteResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{18}
}

func (x *ExchangeSwapExecuteResponse) GetExecuteResponse() *ExecuteResponse {
	if x != nil {
		return x.ExecuteResponse
	}
	return nil
}

func (x *ExchangeSwapExecuteResponse) GetExchangeSwapResponse() *ExchangeSwapResponse {
	if x != nil {
		return x.ExchangeSwapResponse
	}
	return nil
}

type ExecuteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash"`
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{19}
}

func (x *ExecuteResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type ExchangeSwapTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash string                    `protobuf:"bytes,1,opt,name=transactionHash,proto3" json:"transactionHash"`
	Quote           *ExchangeSwapExecuteQuote `protobuf:"bytes,2,opt,name=quote,proto3" json:"quote"`
}

func (x *ExchangeSwapTransactionResponse) Reset() {
	*x = ExchangeSwapTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSwapTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSwapTransactionResponse) ProtoMessage() {}

func (x *ExchangeSwapTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSwapTransactionResponse.ProtoReflect.Descriptor instead.
func (*ExchangeSwapTransactionResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{20}
}

func (x *ExchangeSwapTransactionResponse) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *ExchangeSwapTransactionResponse) GetQuote() *ExchangeSwapExecuteQuote {
	if x != nil {
		return x.Quote
	}
	return nil
}

type ExchangeSwapExecuteQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To           string `protobuf:"bytes,1,opt,name=to,proto3" json:"to"`
	Data         string `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
	Value        string `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
	Price        string `protobuf:"bytes,4,opt,name=price,proto3" json:"price"`
	Gas          string `protobuf:"bytes,5,opt,name=gas,proto3" json:"gas"`
	EstimatedGas string `protobuf:"bytes,6,opt,name=estimatedGas,proto3" json:"estimatedGas"`
	GasPrice     string `protobuf:"bytes,7,opt,name=gasPrice,proto3" json:"gasPrice"`
}

func (x *ExchangeSwapExecuteQuote) Reset() {
	*x = ExchangeSwapExecuteQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSwapExecuteQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSwapExecuteQuote) ProtoMessage() {}

func (x *ExchangeSwapExecuteQuote) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSwapExecuteQuote.ProtoReflect.Descriptor instead.
func (*ExchangeSwapExecuteQuote) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{21}
}

func (x *ExchangeSwapExecuteQuote) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ExchangeSwapExecuteQuote) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ExchangeSwapExecuteQuote) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ExchangeSwapExecuteQuote) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *ExchangeSwapExecuteQuote) GetGas() string {
	if x != nil {
		return x.Gas
	}
	return ""
}

func (x *ExchangeSwapExecuteQuote) GetEstimatedGas() string {
	if x != nil {
		return x.EstimatedGas
	}
	return ""
}

func (x *ExchangeSwapExecuteQuote) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

type FreeTradeCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account      string `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	Chain        string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain"`
	ExchangeType string `protobuf:"bytes,3,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type"`
}

func (x *FreeTradeCountRequest) Reset() {
	*x = FreeTradeCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeTradeCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeTradeCountRequest) ProtoMessage() {}

func (x *FreeTradeCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeTradeCountRequest.ProtoReflect.Descriptor instead.
func (*FreeTradeCountRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{22}
}

func (x *FreeTradeCountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *FreeTradeCountRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *FreeTradeCountRequest) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

type FreeTradeCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId        string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id"`
	ChainName      string `protobuf:"bytes,2,opt,name=chain_name,json=chainName,proto3" json:"chain_name"`
	Account        string `protobuf:"bytes,3,opt,name=account,proto3" json:"account"`
	FreeTradeCount string `protobuf:"bytes,4,opt,name=free_trade_count,json=freeTradeCount,proto3" json:"free_trade_count"`
}

func (x *FreeTradeCountResponse) Reset() {
	*x = FreeTradeCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeTradeCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeTradeCountResponse) ProtoMessage() {}

func (x *FreeTradeCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeTradeCountResponse.ProtoReflect.Descriptor instead.
func (*FreeTradeCountResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{23}
}

func (x *FreeTradeCountResponse) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *FreeTradeCountResponse) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *FreeTradeCountResponse) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *FreeTradeCountResponse) GetFreeTradeCount() string {
	if x != nil {
		return x.FreeTradeCount
	}
	return ""
}

type ExchangeSignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain        string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	TakerAddress string `protobuf:"bytes,2,opt,name=taker_address,json=takerAddress,proto3" json:"taker_address"`
	SellToken    string `protobuf:"bytes,3,opt,name=sell_token,json=sellToken,proto3" json:"sell_token"`
	BuyToken     string `protobuf:"bytes,4,opt,name=buy_token,json=buyToken,proto3" json:"buy_token"`
	SellAmount   string `protobuf:"bytes,5,opt,name=sell_amount,json=sellAmount,proto3" json:"sell_amount"`
	Slippage     string `protobuf:"bytes,6,opt,name=slippage,proto3" json:"slippage"`
	Signature    string `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature"`
	ExchangeType string `protobuf:"bytes,8,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type"`
}

func (x *ExchangeSignatureRequest) Reset() {
	*x = ExchangeSignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSignatureRequest) ProtoMessage() {}

func (x *ExchangeSignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSignatureRequest.ProtoReflect.Descriptor instead.
func (*ExchangeSignatureRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{24}
}

func (x *ExchangeSignatureRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *ExchangeSignatureRequest) GetTakerAddress() string {
	if x != nil {
		return x.TakerAddress
	}
	return ""
}

func (x *ExchangeSignatureRequest) GetSellToken() string {
	if x != nil {
		return x.SellToken
	}
	return ""
}

func (x *ExchangeSignatureRequest) GetBuyToken() string {
	if x != nil {
		return x.BuyToken
	}
	return ""
}

func (x *ExchangeSignatureRequest) GetSellAmount() string {
	if x != nil {
		return x.SellAmount
	}
	return ""
}

func (x *ExchangeSignatureRequest) GetSlippage() string {
	if x != nil {
		return x.Slippage
	}
	return ""
}

func (x *ExchangeSignatureRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *ExchangeSignatureRequest) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

type ExchangeSignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZeroswapData *ZeroswapSignatureResponse `protobuf:"bytes,1,opt,name=zeroswap_data,json=zeroswapData,proto3" json:"zeroswap_data"`
	CowswapData  *CowSwapSignatureResponse  `protobuf:"bytes,2,opt,name=cowswap_data,json=cowswapData,proto3" json:"cowswap_data"`
}

func (x *ExchangeSignatureResponse) Reset() {
	*x = ExchangeSignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSignatureResponse) ProtoMessage() {}

func (x *ExchangeSignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSignatureResponse.ProtoReflect.Descriptor instead.
func (*ExchangeSignatureResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{25}
}

func (x *ExchangeSignatureResponse) GetZeroswapData() *ZeroswapSignatureResponse {
	if x != nil {
		return x.ZeroswapData
	}
	return nil
}

func (x *ExchangeSignatureResponse) GetCowswapData() *CowSwapSignatureResponse {
	if x != nil {
		return x.CowswapData
	}
	return nil
}

type ZeroswapSignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types       *ExchangeSignatureTypes `protobuf:"bytes,1,opt,name=types,proto3" json:"types"`
	Domain      *ExchangeDomain         `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain"`
	PrimaryType string                  `protobuf:"bytes,3,opt,name=primaryType,proto3" json:"primaryType"`
	Message     *ExchangeMessage        `protobuf:"bytes,4,opt,name=message,proto3" json:"message"`
}

func (x *ZeroswapSignatureResponse) Reset() {
	*x = ZeroswapSignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZeroswapSignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZeroswapSignatureResponse) ProtoMessage() {}

func (x *ZeroswapSignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZeroswapSignatureResponse.ProtoReflect.Descriptor instead.
func (*ZeroswapSignatureResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{26}
}

func (x *ZeroswapSignatureResponse) GetTypes() *ExchangeSignatureTypes {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ZeroswapSignatureResponse) GetDomain() *ExchangeDomain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *ZeroswapSignatureResponse) GetPrimaryType() string {
	if x != nil {
		return x.PrimaryType
	}
	return ""
}

func (x *ZeroswapSignatureResponse) GetMessage() *ExchangeMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type CowSwapSignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SellToken         string `protobuf:"bytes,1,opt,name=sellToken,proto3" json:"sellToken"`
	BuyToken          string `protobuf:"bytes,2,opt,name=buyToken,proto3" json:"buyToken"`
	Receiver          string `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver"`
	SellAmount        string `protobuf:"bytes,4,opt,name=sellAmount,proto3" json:"sellAmount"`
	BuyAmount         string `protobuf:"bytes,5,opt,name=buyAmount,proto3" json:"buyAmount"`
	ValidTo           int32  `protobuf:"varint,6,opt,name=validTo,proto3" json:"validTo"`
	AppData           string `protobuf:"bytes,7,opt,name=appData,proto3" json:"appData"`
	FeeAmount         string `protobuf:"bytes,8,opt,name=feeAmount,proto3" json:"feeAmount"`
	Kind              string `protobuf:"bytes,9,opt,name=kind,proto3" json:"kind"`
	PartiallyFillable bool   `protobuf:"varint,10,opt,name=partiallyFillable,proto3" json:"partiallyFillable"`
	SellTokenBalance  string `protobuf:"bytes,11,opt,name=sellTokenBalance,proto3" json:"sellTokenBalance"`
	BuyTokenBalance   string `protobuf:"bytes,12,opt,name=buyTokenBalance,proto3" json:"buyTokenBalance"`
	From              string `protobuf:"bytes,15,opt,name=from,proto3" json:"from"`
	QuoteID           int32  `protobuf:"varint,16,opt,name=quoteID,proto3" json:"quoteID"`
}

func (x *CowSwapSignatureResponse) Reset() {
	*x = CowSwapSignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CowSwapSignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CowSwapSignatureResponse) ProtoMessage() {}

func (x *CowSwapSignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CowSwapSignatureResponse.ProtoReflect.Descriptor instead.
func (*CowSwapSignatureResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{27}
}

func (x *CowSwapSignatureResponse) GetSellToken() string {
	if x != nil {
		return x.SellToken
	}
	return ""
}

func (x *CowSwapSignatureResponse) GetBuyToken() string {
	if x != nil {
		return x.BuyToken
	}
	return ""
}

func (x *CowSwapSignatureResponse) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *CowSwapSignatureResponse) GetSellAmount() string {
	if x != nil {
		return x.SellAmount
	}
	return ""
}

func (x *CowSwapSignatureResponse) GetBuyAmount() string {
	if x != nil {
		return x.BuyAmount
	}
	return ""
}

func (x *CowSwapSignatureResponse) GetValidTo() int32 {
	if x != nil {
		return x.ValidTo
	}
	return 0
}

func (x *CowSwapSignatureResponse) GetAppData() string {
	if x != nil {
		return x.AppData
	}
	return ""
}

func (x *CowSwapSignatureResponse) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *CowSwapSignatureResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CowSwapSignatureResponse) GetPartiallyFillable() bool {
	if x != nil {
		return x.PartiallyFillable
	}
	return false
}

func (x *CowSwapSignatureResponse) GetSellTokenBalance() string {
	if x != nil {
		return x.SellTokenBalance
	}
	return ""
}

func (x *CowSwapSignatureResponse) GetBuyTokenBalance() string {
	if x != nil {
		return x.BuyTokenBalance
	}
	return ""
}

func (x *CowSwapSignatureResponse) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CowSwapSignatureResponse) GetQuoteID() int32 {
	if x != nil {
		return x.QuoteID
	}
	return 0
}

type ExchangeSignatureTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EIP712Domain []*ExchangeType `protobuf:"bytes,1,rep,name=EIP712Domain,proto3" json:"EIP712Domain"`
	Swap         []*ExchangeType `protobuf:"bytes,2,rep,name=Swap,proto3" json:"Swap"`
}

func (x *ExchangeSignatureTypes) Reset() {
	*x = ExchangeSignatureTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSignatureTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSignatureTypes) ProtoMessage() {}

func (x *ExchangeSignatureTypes) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSignatureTypes.ProtoReflect.Descriptor instead.
func (*ExchangeSignatureTypes) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{28}
}

func (x *ExchangeSignatureTypes) GetEIP712Domain() []*ExchangeType {
	if x != nil {
		return x.EIP712Domain
	}
	return nil
}

func (x *ExchangeSignatureTypes) GetSwap() []*ExchangeType {
	if x != nil {
		return x.Swap
	}
	return nil
}

type ExchangeDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Version           string `protobuf:"bytes,2,opt,name=version,proto3" json:"version"`
	ChainId           int32  `protobuf:"varint,3,opt,name=chainId,proto3" json:"chainId"`
	VerifyingContract string `protobuf:"bytes,4,opt,name=verifyingContract,proto3" json:"verifyingContract"`
	Salt              string `protobuf:"bytes,5,opt,name=salt,proto3" json:"salt"`
}

func (x *ExchangeDomain) Reset() {
	*x = ExchangeDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeDomain) ProtoMessage() {}

func (x *ExchangeDomain) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeDomain.ProtoReflect.Descriptor instead.
func (*ExchangeDomain) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{29}
}

func (x *ExchangeDomain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeDomain) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ExchangeDomain) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ExchangeDomain) GetVerifyingContract() string {
	if x != nil {
		return x.VerifyingContract
	}
	return ""
}

func (x *ExchangeDomain) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

type ExchangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyToken            string `protobuf:"bytes,1,opt,name=buyToken,proto3" json:"buyToken"`
	SellToken           string `protobuf:"bytes,2,opt,name=sellToken,proto3" json:"sellToken"`
	BuyTokenAddress     string `protobuf:"bytes,3,opt,name=buyTokenAddress,proto3" json:"buyTokenAddress"`
	SellTokenAddress    string `protobuf:"bytes,4,opt,name=sellTokenAddress,proto3" json:"sellTokenAddress"`
	SellAmount          string `protobuf:"bytes,5,opt,name=sellAmount,proto3" json:"sellAmount"`
	Recipient           string `protobuf:"bytes,6,opt,name=recipient,proto3" json:"recipient"`
	SlippageTolerance   int32  `protobuf:"varint,7,opt,name=slippageTolerance,proto3" json:"slippageTolerance"`
	TransactionDeadline int32  `protobuf:"varint,8,opt,name=transactionDeadline,proto3" json:"transactionDeadline"`
	ExecutorContract    string `protobuf:"bytes,9,opt,name=executorContract,proto3" json:"executorContract"`
}

func (x *ExchangeMessage) Reset() {
	*x = ExchangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMessage) ProtoMessage() {}

func (x *ExchangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMessage.ProtoReflect.Descriptor instead.
func (*ExchangeMessage) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{30}
}

func (x *ExchangeMessage) GetBuyToken() string {
	if x != nil {
		return x.BuyToken
	}
	return ""
}

func (x *ExchangeMessage) GetSellToken() string {
	if x != nil {
		return x.SellToken
	}
	return ""
}

func (x *ExchangeMessage) GetBuyTokenAddress() string {
	if x != nil {
		return x.BuyTokenAddress
	}
	return ""
}

func (x *ExchangeMessage) GetSellTokenAddress() string {
	if x != nil {
		return x.SellTokenAddress
	}
	return ""
}

func (x *ExchangeMessage) GetSellAmount() string {
	if x != nil {
		return x.SellAmount
	}
	return ""
}

func (x *ExchangeMessage) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *ExchangeMessage) GetSlippageTolerance() int32 {
	if x != nil {
		return x.SlippageTolerance
	}
	return 0
}

func (x *ExchangeMessage) GetTransactionDeadline() int32 {
	if x != nil {
		return x.TransactionDeadline
	}
	return 0
}

func (x *ExchangeMessage) GetExecutorContract() string {
	if x != nil {
		return x.ExecutorContract
	}
	return ""
}

type ExchangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
}

func (x *ExchangeType) Reset() {
	*x = ExchangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeType) ProtoMessage() {}

func (x *ExchangeType) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeType.ProtoReflect.Descriptor instead.
func (*ExchangeType) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{31}
}

func (x *ExchangeType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type TokenApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain        string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
	Gasless      string `protobuf:"bytes,3,opt,name=gasless,proto3" json:"gasless"`
	ExchangeType string `protobuf:"bytes,4,opt,name=exchange_type,json=exchangeType,proto3" json:"exchange_type"`
}

func (x *TokenApprovalRequest) Reset() {
	*x = TokenApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenApprovalRequest) ProtoMessage() {}

func (x *TokenApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenApprovalRequest.ProtoReflect.Descriptor instead.
func (*TokenApprovalRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{32}
}

func (x *TokenApprovalRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *TokenApprovalRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenApprovalRequest) GetGasless() string {
	if x != nil {
		return x.Gasless
	}
	return ""
}

func (x *TokenApprovalRequest) GetExchangeType() string {
	if x != nil {
		return x.ExchangeType
	}
	return ""
}

type TokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol       string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol"`
	Decimals     string `protobuf:"bytes,2,opt,name=decimals,proto3" json:"decimals"`
	TokenAddress string `protobuf:"bytes,3,opt,name=tokenAddress,proto3" json:"tokenAddress"`
}

func (x *TokenInfo) Reset() {
	*x = TokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfo) ProtoMessage() {}

func (x *TokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfo.ProtoReflect.Descriptor instead.
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{33}
}

func (x *TokenInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenInfo) GetDecimals() string {
	if x != nil {
		return x.Decimals
	}
	return ""
}

func (x *TokenInfo) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

type TokenApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId      int32      `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId"`
	ChainName    string     `protobuf:"bytes,2,opt,name=chainName,proto3" json:"chainName"`
	TokenInfo    *TokenInfo `protobuf:"bytes,3,opt,name=tokenInfo,proto3" json:"tokenInfo"`
	To           string     `protobuf:"bytes,4,opt,name=to,proto3" json:"to"`
	Data         string     `protobuf:"bytes,5,opt,name=data,proto3" json:"data"`
	EstimatedGas int32      `protobuf:"varint,6,opt,name=estimatedGas,proto3" json:"estimatedGas"`
	GasPrice     string     `protobuf:"bytes,7,opt,name=gasPrice,proto3" json:"gasPrice"`
}

func (x *TokenApprovalResponse) Reset() {
	*x = TokenApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenApprovalResponse) ProtoMessage() {}

func (x *TokenApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenApprovalResponse.ProtoReflect.Descriptor instead.
func (*TokenApprovalResponse) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{34}
}

func (x *TokenApprovalResponse) GetChainId() int32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *TokenApprovalResponse) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *TokenApprovalResponse) GetTokenInfo() *TokenInfo {
	if x != nil {
		return x.TokenInfo
	}
	return nil
}

func (x *TokenApprovalResponse) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TokenApprovalResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TokenApprovalResponse) GetEstimatedGas() int32 {
	if x != nil {
		return x.EstimatedGas
	}
	return 0
}

func (x *TokenApprovalResponse) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

type PositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string           `protobuf:"bytes,1,opt,name=address,proto3" json:"address"`
	PositionPayload *PositionPayload `protobuf:"bytes,2,opt,name=position_payload,json=positionPayload,proto3" json:"position_payload"`
}

func (x *PositionRequest) Reset() {
	*x = PositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionRequest) ProtoMessage() {}

func (x *PositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionRequest.ProtoReflect.Descriptor instead.
func (*PositionRequest) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{35}
}

func (x *PositionRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PositionRequest) GetPositionPayload() *PositionPayload {
	if x != nil {
		return x.PositionPayload
	}
	return nil
}

type PositionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainIds    []string `protobuf:"bytes,1,rep,name=chain_ids,json=chainIds,proto3" json:"chain_ids"`
	ProtocolIds []string `protobuf:"bytes,2,rep,name=protocol_ids,json=protocolIds,proto3" json:"protocol_ids"`
	Currency    string   `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency"`
}

func (x *PositionPayload) Reset() {
	*x = PositionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swap_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionPayload) ProtoMessage() {}

func (x *PositionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_swap_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionPayload.ProtoReflect.Descriptor instead.
func (*PositionPayload) Descriptor() ([]byte, []int) {
	return file_swap_proto_rawDescGZIP(), []int{36}
}

func (x *PositionPayload) GetChainIds() []string {
	if x != nil {
		return x.ChainIds
	}
	return nil
}

func (x *PositionPayload) GetProtocolIds() []string {
	if x != nil {
		return x.ProtocolIds
	}
	return nil
}

func (x *PositionPayload) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

var File_swap_proto protoreflect.FileDescriptor

var file_swap_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x22, 0xe2, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0xc8, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x14, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67,
	0x65, 0x22, 0x7f, 0x0a, 0x1a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa2, 0x03, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x72,
	0x65, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72,
	0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x54, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc7, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x14, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xdc, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x3d, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x78, 0x73,
	0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x81, 0x02, 0x0a, 0x1c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x6c, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x4c, 0x31, 0x46, 0x65, 0x65, 0x12, 0x30,
	0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x33, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x03, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x16, 0x72, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x54, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xee,
	0x01, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x22, 0x0a, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x78, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3d,
	0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x77, 0x61, 0x70, 0x54, 0x78, 0x73, 0x52, 0x0e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xea, 0x01,
	0x0a, 0x1a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x7a, 0x65, 0x72, 0x6f, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x65, 0x72, 0x6f, 0x53,
	0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0f, 0x7a, 0x65, 0x72, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x6f, 0x77, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x77, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x77, 0x53,
	0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x16, 0x5a,
	0x65, 0x72, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61,
	0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x04, 0x0a, 0x15, 0x43, 0x6f, 0x77,
	0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x6c, 0x79, 0x46, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65,
	0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x22, 0xb3,
	0x01, 0x0a, 0x1b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x16, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x82, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x35,
	0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x67, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x47, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x6c, 0x0a, 0x15, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x65,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x18,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa6, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x0d, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x65, 0x72,
	0x6f, 0x73, 0x77, 0x61, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x77, 0x61, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x77, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x77, 0x53, 0x77, 0x61, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x77,
	0x73, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd3, 0x01, 0x0a, 0x19, 0x5a, 0x65, 0x72,
	0x6f, 0x73, 0x77, 0x61, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc6,
	0x03, 0x0a, 0x18, 0x43, 0x6f, 0x77, 0x53, 0x77, 0x61, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x6c, 0x79, 0x46, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x22, 0x7a, 0x0a, 0x16, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x0c, 0x45, 0x49, 0x50, 0x37, 0x31, 0x32, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x45, 0x49,
	0x50, 0x37, 0x31, 0x32, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x53, 0x77,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x53,
	0x77, 0x61, 0x70, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x22, 0xeb, 0x02, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73,
	0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x36,
	0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x61, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61,
	0x73, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x63, 0x0a, 0x09, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xe3, 0x01, 0x0a, 0x15, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x47, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x6e, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6d, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_swap_proto_rawDescOnce sync.Once
	file_swap_proto_rawDescData = file_swap_proto_rawDesc
)

func file_swap_proto_rawDescGZIP() []byte {
	file_swap_proto_rawDescOnce.Do(func() {
		file_swap_proto_rawDescData = protoimpl.X.CompressGZIP(file_swap_proto_rawDescData)
	})
	return file_swap_proto_rawDescData
}

var file_swap_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_swap_proto_goTypes = []interface{}{
	(*ExchangeTokenRequest)(nil),            // 0: proto.ExchangeTokenRequest
	(*ExchangeTokenResponse)(nil),           // 1: proto.ExchangeTokenResponse
	(*ExchangeTokenInfo)(nil),               // 2: proto.ExchangeTokenInfo
	(*ExchangeMultiQuoteRequest)(nil),       // 3: proto.ExchangeMultiQuoteRequest
	(*MultiChainRequests)(nil),              // 4: proto.MultiChainRequests
	(*ExchangeMultiQuoteResponse)(nil),      // 5: proto.ExchangeMultiQuoteResponse
	(*MultiChainResponse)(nil),              // 6: proto.MultiChainResponse
	(*ExchangeMultiSwapRequest)(nil),        // 7: proto.ExchangeMultiSwapRequest
	(*ExchangeMultiSwapResponse)(nil),       // 8: proto.ExchangeMultiSwapResponse
	(*ExchangeMultipleSwapResponse)(nil),    // 9: proto.ExchangeMultipleSwapResponse
	(*ExchangeQuoteRequest)(nil),            // 10: proto.ExchangeQuoteRequest
	(*ExchangeQuoteResponse)(nil),           // 11: proto.ExchangeQuoteResponse
	(*ExchangeSwapRequest)(nil),             // 12: proto.ExchangeSwapRequest
	(*MultiSwapTxs)(nil),                    // 13: proto.MultiSwapTxs
	(*ExchangeSwapResponse)(nil),            // 14: proto.ExchangeSwapResponse
	(*ExchangeSwapExecuteRequest)(nil),      // 15: proto.ExchangeSwapExecuteRequest
	(*ZeroSwapExecuteRequest)(nil),          // 16: proto.ZeroSwapExecuteRequest
	(*CowSwapExecuteRequest)(nil),           // 17: proto.CowSwapExecuteRequest
	(*ExchangeSwapExecuteResponse)(nil),     // 18: proto.ExchangeSwapExecuteResponse
	(*ExecuteResponse)(nil),                 // 19: proto.ExecuteResponse
	(*ExchangeSwapTransactionResponse)(nil), // 20: proto.ExchangeSwapTransactionResponse
	(*ExchangeSwapExecuteQuote)(nil),        // 21: proto.ExchangeSwapExecuteQuote
	(*FreeTradeCountRequest)(nil),           // 22: proto.FreeTradeCountRequest
	(*FreeTradeCountResponse)(nil),          // 23: proto.FreeTradeCountResponse
	(*ExchangeSignatureRequest)(nil),        // 24: proto.ExchangeSignatureRequest
	(*ExchangeSignatureResponse)(nil),       // 25: proto.ExchangeSignatureResponse
	(*ZeroswapSignatureResponse)(nil),       // 26: proto.ZeroswapSignatureResponse
	(*CowSwapSignatureResponse)(nil),        // 27: proto.CowSwapSignatureResponse
	(*ExchangeSignatureTypes)(nil),          // 28: proto.ExchangeSignatureTypes
	(*ExchangeDomain)(nil),                  // 29: proto.ExchangeDomain
	(*ExchangeMessage)(nil),                 // 30: proto.ExchangeMessage
	(*ExchangeType)(nil),                    // 31: proto.ExchangeType
	(*TokenApprovalRequest)(nil),            // 32: proto.TokenApprovalRequest
	(*TokenInfo)(nil),                       // 33: proto.TokenInfo
	(*TokenApprovalResponse)(nil),           // 34: proto.TokenApprovalResponse
	(*PositionRequest)(nil),                 // 35: proto.PositionRequest
	(*PositionPayload)(nil),                 // 36: proto.PositionPayload
	(*GasPriceInfo)(nil),                    // 37: proto.GasPriceInfo
	(*ApprovalResponse)(nil),                // 38: proto.ApprovalResponse
}
var file_swap_proto_depIdxs = []int32{
	2,  // 0: proto.ExchangeTokenResponse.exchangeTokens:type_name -> proto.ExchangeTokenInfo
	4,  // 1: proto.ExchangeMultiQuoteRequest.multi_chain_requests:type_name -> proto.MultiChainRequests
	6,  // 2: proto.ExchangeMultiQuoteResponse.multi_chain_response:type_name -> proto.MultiChainResponse
	4,  // 3: proto.ExchangeMultiSwapRequest.multi_chain_requests:type_name -> proto.MultiChainRequests
	13, // 4: proto.ExchangeMultiSwapResponse.multi_route_data:type_name -> proto.MultiSwapTxs
	37, // 5: proto.ExchangeMultipleSwapResponse.gas_price:type_name -> proto.GasPriceInfo
	38, // 6: proto.ExchangeMultipleSwapResponse.approval:type_name -> proto.ApprovalResponse
	14, // 7: proto.ExchangeMultipleSwapResponse.transaction:type_name -> proto.ExchangeSwapResponse
	13, // 8: proto.ExchangeSwapResponse.multi_route_data:type_name -> proto.MultiSwapTxs
	16, // 9: proto.ExchangeSwapExecuteRequest.zero_swap_payload:type_name -> proto.ZeroSwapExecuteRequest
	17, // 10: proto.ExchangeSwapExecuteRequest.cow_swap_payload:type_name -> proto.CowSwapExecuteRequest
	19, // 11: proto.ExchangeSwapExecuteResponse.execute_response:type_name -> proto.ExecuteResponse
	14, // 12: proto.ExchangeSwapExecuteResponse.exchange_swap_response:type_name -> proto.ExchangeSwapResponse
	21, // 13: proto.ExchangeSwapTransactionResponse.quote:type_name -> proto.ExchangeSwapExecuteQuote
	26, // 14: proto.ExchangeSignatureResponse.zeroswap_data:type_name -> proto.ZeroswapSignatureResponse
	27, // 15: proto.ExchangeSignatureResponse.cowswap_data:type_name -> proto.CowSwapSignatureResponse
	28, // 16: proto.ZeroswapSignatureResponse.types:type_name -> proto.ExchangeSignatureTypes
	29, // 17: proto.ZeroswapSignatureResponse.domain:type_name -> proto.ExchangeDomain
	30, // 18: proto.ZeroswapSignatureResponse.message:type_name -> proto.ExchangeMessage
	31, // 19: proto.ExchangeSignatureTypes.EIP712Domain:type_name -> proto.ExchangeType
	31, // 20: proto.ExchangeSignatureTypes.Swap:type_name -> proto.ExchangeType
	33, // 21: proto.TokenApprovalResponse.tokenInfo:type_name -> proto.TokenInfo
	36, // 22: proto.PositionRequest.position_payload:type_name -> proto.PositionPayload
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_swap_proto_init() }
func file_swap_proto_init() {
	if File_swap_proto != nil {
		return
	}
	file_contract_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_swap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMultiQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiChainRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMultiQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMultiSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMultiSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMultipleSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSwapTxs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSwapExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZeroSwapExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CowSwapExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSwapExecuteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSwapTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSwapExecuteQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeTradeCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeTradeCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZeroswapSignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CowSwapSignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSignatureTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swap_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_swap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_swap_proto_goTypes,
		DependencyIndexes: file_swap_proto_depIdxs,
		MessageInfos:      file_swap_proto_msgTypes,
	}.Build()
	File_swap_proto = out.File
	file_swap_proto_rawDesc = nil
	file_swap_proto_goTypes = nil
	file_swap_proto_depIdxs = nil
}
