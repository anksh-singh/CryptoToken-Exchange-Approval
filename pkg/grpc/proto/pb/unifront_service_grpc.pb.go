// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: unifront_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UnifrontClient is the client API for Unifront service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnifrontClient interface {
	
	Allowance(ctx context.Context, in *AllowanceRequest, opts ...grpc.CallOption) (*AllowanceResponse, error)
	
}

type unifrontClient struct {
	cc grpc.ClientConnInterface
}

func NewUnifrontClient(cc grpc.ClientConnInterface) UnifrontClient {
	return &unifrontClient{cc}
}

func (c *unifrontClient) TokenPrice(ctx context.Context, in *TokenPriceRequest, opts ...grpc.CallOption) (*TokenPriceResponse, error) {
	out := new(TokenPriceResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/tokenPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) TokenPriceV2(ctx context.Context, in *TokenPriceRequest, opts ...grpc.CallOption) (*TokenPriceResponseV2, error) {
	out := new(TokenPriceResponseV2)
	err := c.cc.Invoke(ctx, "/proto.Unifront/tokenPriceV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) ProcessingFee(ctx context.Context, in *ProcessingFeeRequest, opts ...grpc.CallOption) (*ProcessingFeeResponse, error) {
	out := new(ProcessingFeeResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/processingFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) Nonce(ctx context.Context, in *NonceRequest, opts ...grpc.CallOption) (*NonceResponse, error) {
	out := new(NonceResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/nonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/sendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) ListTransaction(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (*ListTransactionResponse, error) {
	out := new(ListTransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/listTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) UserData(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserDataResponse, error) {
	out := new(UserDataResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/userData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}


func (c *unifrontClient) TxStatus(ctx context.Context, in *TxStatusRequest, opts ...grpc.CallOption) (*TxStatusResponse, error) {
	out := new(TxStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/txStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) GasLimit(ctx context.Context, in *GasLimitRequest, opts ...grpc.CallOption) (*GasLimitResponse, error) {
	out := new(GasLimitResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/gasLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) TokenInfo(ctx context.Context, in *TokenInfoRequest, opts ...grpc.CallOption) (*TokenInfoResponse, error) {
	out := new(TokenInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/tokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) TokenDetail(ctx context.Context, in *TokenDetailRequest, opts ...grpc.CallOption) (*TokenDetailResponse, error) {
	out := new(TokenDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/tokenDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) Allowance(ctx context.Context, in *AllowanceRequest, opts ...grpc.CallOption) (*AllowanceResponse, error) {
	out := new(AllowanceResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/allowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) Approve(ctx context.Context, in *ApprovalRequest, opts ...grpc.CallOption) (*ApprovalResponse, error) {
	out := new(ApprovalResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) GetNftCollections(ctx context.Context, in *NftCollectionRequest, opts ...grpc.CallOption) (*ListNftCollectionResponse, error) {
	out := new(ListNftCollectionResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/GetNftCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) GetPositions(ctx context.Context, in *PositionChainData, opts ...grpc.CallOption) (*GetPositionsResponse, error) {
	out := new(GetPositionsResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/getPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) BulkApproval(ctx context.Context, in *ApprovalRequest, opts ...grpc.CallOption) (*BulkApprovalResponse, error) {
	out := new(BulkApprovalResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/BulkApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) BulkAllowance(ctx context.Context, in *AllowanceRequest, opts ...grpc.CallOption) (*BulkAllowanceResponse, error) {
	out := new(BulkAllowanceResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/BulkAllowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifrontClient) GetOpportunites(ctx context.Context, in *GetOpportunitiesRequest, opts ...grpc.CallOption) (*GetOpportunitesResponse, error) {
	out := new(GetOpportunitesResponse)
	err := c.cc.Invoke(ctx, "/proto.Unifront/GetOpportunites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnifrontServer is the server API for Unifront service.
// All implementations must embed UnimplementedUnifrontServer
// for forward compatibility
type UnifrontServer interface {
	TokenPrice(context.Context, *TokenPriceRequest) (*TokenPriceResponse, error)
	TokenPriceV2(context.Context, *TokenPriceRequest) (*TokenPriceResponseV2, error)
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	ProcessingFee(context.Context, *ProcessingFeeRequest) (*ProcessingFeeResponse, error)
	Nonce(context.Context, *NonceRequest) (*NonceResponse, error)
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	ListTransaction(context.Context, *ListTransactionRequest) (*ListTransactionResponse, error)
	UserData(context.Context, *UserDataRequest) (*UserDataResponse, error)
	TxStatus(context.Context, *TxStatusRequest) (*TxStatusResponse, error)
	GasLimit(context.Context, *GasLimitRequest) (*GasLimitResponse, error)
	TokenInfo(context.Context, *TokenInfoRequest) (*TokenInfoResponse, error)
	TokenDetail(context.Context, *TokenDetailRequest) (*TokenDetailResponse, error)
	Allowance(context.Context, *AllowanceRequest) (*AllowanceResponse, error)
	Approve(context.Context, *ApprovalRequest) (*ApprovalResponse, error)
	GetNftCollections(context.Context, *NftCollectionRequest) (*ListNftCollectionResponse, error)
	GetPositions(context.Context, *PositionChainData) (*GetPositionsResponse, error)
	BulkApproval(context.Context, *ApprovalRequest) (*BulkApprovalResponse, error)
	BulkAllowance(context.Context, *AllowanceRequest) (*BulkAllowanceResponse, error)
	GetOpportunites(context.Context, *GetOpportunitiesRequest) (*GetOpportunitesResponse, error)
	mustEmbedUnimplementedUnifrontServer()
}

// UnimplementedUnifrontServer must be embedded to have forward compatible implementations.
type UnimplementedUnifrontServer struct {
}

func (UnimplementedUnifrontServer) TokenPrice(context.Context, *TokenPriceRequest) (*TokenPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPrice not implemented")
}
func (UnimplementedUnifrontServer) TokenPriceV2(context.Context, *TokenPriceRequest) (*TokenPriceResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPriceV2 not implemented")
}
func (UnimplementedUnifrontServer) Balance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedUnifrontServer) ProcessingFee(context.Context, *ProcessingFeeRequest) (*ProcessingFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessingFee not implemented")
}
func (UnimplementedUnifrontServer) Nonce(context.Context, *NonceRequest) (*NonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nonce not implemented")
}
func (UnimplementedUnifrontServer) SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedUnifrontServer) ListTransaction(context.Context, *ListTransactionRequest) (*ListTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransaction not implemented")
}
func (UnimplementedUnifrontServer) UserData(context.Context, *UserDataRequest) (*UserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserData not implemented")
}

func (UnimplementedUnifrontServer) TxStatus(context.Context, *TxStatusRequest) (*TxStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxStatus not implemented")
}
func (UnimplementedUnifrontServer) GasLimit(context.Context, *GasLimitRequest) (*GasLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasLimit not implemented")
}
func (UnimplementedUnifrontServer) TokenInfo(context.Context, *TokenInfoRequest) (*TokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenInfo not implemented")
}
func (UnimplementedUnifrontServer) TokenDetail(context.Context, *TokenDetailRequest) (*TokenDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenDetail not implemented")
}

func (UnimplementedUnifrontServer) Allowance(context.Context, *AllowanceRequest) (*AllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allowance not implemented")
}
func (UnimplementedUnifrontServer) Approve(context.Context, *ApprovalRequest) (*ApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedUnifrontServer) GetNftCollections(context.Context, *NftCollectionRequest) (*ListNftCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftCollections not implemented")
}
func (UnimplementedUnifrontServer) GetPositions(context.Context, *PositionChainData) (*GetPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositions not implemented")
}
func (UnimplementedUnifrontServer) BulkApproval(context.Context, *ApprovalRequest) (*BulkApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkApproval not implemented")
}
func (UnimplementedUnifrontServer) BulkAllowance(context.Context, *AllowanceRequest) (*BulkAllowanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkAllowance not implemented")
}
func (UnimplementedUnifrontServer) GetOpportunites(context.Context, *GetOpportunitiesRequest) (*GetOpportunitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpportunites not implemented")
}
func (UnimplementedUnifrontServer) mustEmbedUnimplementedUnifrontServer() {}

// UnsafeUnifrontServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnifrontServer will
// result in compilation errors.
type UnsafeUnifrontServer interface {
	mustEmbedUnimplementedUnifrontServer()
}

func RegisterUnifrontServer(s grpc.ServiceRegistrar, srv UnifrontServer) {
	s.RegisterService(&Unifront_ServiceDesc, srv)
}

func _Unifront_TokenPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).TokenPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/tokenPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).TokenPrice(ctx, req.(*TokenPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_TokenPriceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).TokenPriceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/tokenPriceV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).TokenPriceV2(ctx, req.(*TokenPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_ProcessingFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessingFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).ProcessingFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/processingFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).ProcessingFee(ctx, req.(*ProcessingFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_Nonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).Nonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/nonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).Nonce(ctx, req.(*NonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/sendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_ListTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).ListTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/listTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).ListTransaction(ctx, req.(*ListTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_UserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).UserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/userData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).UserData(ctx, req.(*UserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_TxStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).TxStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/txStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).TxStatus(ctx, req.(*TxStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_GasLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GasLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).GasLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/gasLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).GasLimit(ctx, req.(*GasLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_TokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).TokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/tokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).TokenInfo(ctx, req.(*TokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_TokenDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).TokenDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/tokenDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).TokenDetail(ctx, req.(*TokenDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}


func _Unifront_Allowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).Allowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/allowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).Allowance(ctx, req.(*AllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).Approve(ctx, req.(*ApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_GetNftCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NftCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).GetNftCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/GetNftCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).GetNftCollections(ctx, req.(*NftCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}


func _Unifront_GetPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionChainData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).GetPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/getPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).GetPositions(ctx, req.(*PositionChainData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_BulkApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).BulkApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/BulkApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).BulkApproval(ctx, req.(*ApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_BulkAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).BulkAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/BulkAllowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).BulkAllowance(ctx, req.(*AllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unifront_GetOpportunites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpportunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnifrontServer).GetOpportunites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Unifront/GetOpportunites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnifrontServer).GetOpportunites(ctx, req.(*GetOpportunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Unifront_ServiceDesc is the grpc.ServiceDesc for Unifront service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Unifront_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Unifront",
	HandlerType: (*UnifrontServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "tokenPrice",
			Handler:    _Unifront_TokenPrice_Handler,
		},
		{
			MethodName: "tokenPriceV2",
			Handler:    _Unifront_TokenPriceV2_Handler,
		},
		{
			MethodName: "balance",
			Handler:    _Unifront_Balance_Handler,
		},
		{
			MethodName: "processingFee",
			Handler:    _Unifront_ProcessingFee_Handler,
		},
		{
			MethodName: "nonce",
			Handler:    _Unifront_Nonce_Handler,
		},
		{
			MethodName: "sendTransaction",
			Handler:    _Unifront_SendTransaction_Handler,
		},
		{
			MethodName: "listTransaction",
			Handler:    _Unifront_ListTransaction_Handler,
		},
		{
			MethodName: "userData",
			Handler:    _Unifront_UserData_Handler,
		},
		
		{
			MethodName: "txStatus",
			Handler:    _Unifront_TxStatus_Handler,
		},
		{
			MethodName: "gasLimit",
			Handler:    _Unifront_GasLimit_Handler,
		},
		{
			MethodName: "tokenInfo",
			Handler:    _Unifront_TokenInfo_Handler,
		},
		{
			MethodName: "tokenDetail",
			Handler:    _Unifront_TokenDetail_Handler,
		},
	
		{
			MethodName: "allowance",
			Handler:    _Unifront_Allowance_Handler,
		},
		{
			MethodName: "approve",
			Handler:    _Unifront_Approve_Handler,
		},
		{
			MethodName: "GetNftCollections",
			Handler:    _Unifront_GetNftCollections_Handler,
		},
		{
			MethodName: "getPositions",
			Handler:    _Unifront_GetPositions_Handler,
		},
		{
			MethodName: "BulkApproval",
			Handler:    _Unifront_BulkApproval_Handler,
		},
		{
			MethodName: "BulkAllowance",
			Handler:    _Unifront_BulkAllowance_Handler,
		},
		{
			MethodName: "GetOpportunites",
			Handler:    _Unifront_GetOpportunites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "unifront_service.proto",
}
