syntax = "proto3";
package proto;

import "contract.proto";
import "swap.proto";
import "bridge.proto";
import "cosmos.proto";
option go_package = "./pb";

service Unifront {
  rpc tokenPrice(TokenPriceRequest) returns (TokenPriceResponse);
  rpc tokenPriceV2(TokenPriceRequest) returns (TokenPriceResponseV2);
  rpc balance(BalanceRequest) returns (BalanceResponse);
  rpc processingFee(ProcessingFeeRequest) returns (ProcessingFeeResponse);
  rpc nonce(NonceRequest) returns (NonceResponse);
  rpc sendTransaction(SendTransactionRequest) returns (SendTransactionResponse);
  rpc listTransaction(ListTransactionRequest) returns (ListTransactionResponse);
  rpc userData(UserDataRequest) returns (UserDataResponse);
  rpc exchangeTokens(ExchangeTokenRequest) returns (ExchangeTokenResponse);
  rpc exchangeQuote(ExchangeQuoteRequest) returns (ExchangeQuoteResponse);
  rpc exchangeMultiQuote(ExchangeMultiQuoteRequest) returns (ExchangeMultiQuoteResponse);
  rpc exchangeSwap(ExchangeSwapRequest) returns (ExchangeSwapResponse);
  rpc exchangeMultiSwap(ExchangeMultiSwapRequest) returns (ExchangeMultipleSwapResponse);
  rpc exchangeSwapExecute(ExchangeSwapExecuteRequest)
      returns (ExchangeSwapExecuteResponse);
  rpc FreeTradeCount(FreeTradeCountRequest) returns (FreeTradeCountResponse);
  rpc ExchangeTokenApprove(TokenApprovalRequest)
      returns (TokenApprovalResponse);
  rpc exchangeSwapSignature(ExchangeSignatureRequest)
      returns (ExchangeSignatureResponse);
  rpc txStatus(TxStatusRequest) returns (TxStatusResponse);
  rpc gasLimit(GasLimitRequest) returns (GasLimitResponse);
  rpc tokenInfo(TokenInfoRequest) returns (TokenInfoResponse);
  rpc tokenDetail(TokenDetailRequest) returns (TokenDetailResponse);
  rpc bridgeChain(BridgeChainRequest) returns (BridgeChainResponse);
  rpc bridgeChainTokens(BridgeChainTokensRequest)
      returns (BridgeChainTokensResponse);
  rpc bridgeQuote(BridgeQuoteRequest) returns (BridgeQuoteResponse);
  rpc bridgeTransaction(BridgeTransactionRequest)
      returns (BridgeTransactionResponse);
  rpc bridgeTransactionStatus(BridgeTransactionStatusRequest)
      returns (BridgeTransactionStatusResponse);
  rpc allowance(AllowanceRequest) returns (AllowanceResponse);
  rpc approve(ApprovalRequest) returns (ApprovalResponse);
  rpc GetNftCollections(NftCollectionRequest) returns (ListNftCollectionResponse);
  rpc GetValidators(CosmosValidatorsRequest) returns (CosmosValidatorsResponse);
  rpc GetCosmosAprRates(CosmosAprRatesRequest) returns (CosmosAprRatesResponse);
  rpc GetDelegations(CosmosDelegationsRequest) returns (CosmosDelegationsResponse);
  rpc GetCosmosCDPParams(CosmosCDPParametersRequest) returns (CosmosCDPParametersResponse);
  //  rpc getAccountInfo(getAccountInfoRequest) returns (getAccountInfoResponse);
  //  rpc getFees(GetFeeRequest) returns (GetFeeResponse);
  //  rpc getTokenAccountBalance(GetTokenAccBalanceRequest) returns (GetTokenAccBalanceResponse);
  //  rpc getTransaction(GetTransactionRequest) returns(GetTransactionResponse);
  rpc cosmosAssets(BalanceRequest) returns (CosmosAssetResponse);
  rpc cosmosSendTx(CosmosSendTxRequest)  returns (SendTransactionResponse);
  rpc cosmosSimulateTX(CosmosSimulateTxRequest)  returns (CosmosSimulateTxResponse);
  rpc cosmosGetBlockHeight(GetCosmosBlockHeightRequest) returns(GetCosmosBlockHeightResponse);
  rpc getPositions(PositionChainData) returns(GetPositionsResponse);
  //  rpc getAccountInfo(getAccountInfoRequest) returns
  //  (getAccountInfoResponse); rpc getFees(GetFeeRequest) returns
  //  (GetFeeResponse); rpc getTokenAccountBalance(GetTokenAccBalanceRequest)
  //  returns (GetTokenAccBalanceResponse); rpc
  //  getTransaction(GetTransactionRequest) returns(GetTransactionResponse);
  rpc BulkApproval(ApprovalRequest) returns (BulkApprovalResponse);
  rpc BulkAllowance(AllowanceRequest) returns (BulkAllowanceResponse);
  rpc GetOpportunites(GetOpportunitiesRequest)  returns (GetOpportunitesResponse);
}
